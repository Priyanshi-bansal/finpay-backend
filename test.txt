const billFetch = async (req, res) => {
  try {
    const data = axios.post(
      "https://stgapi.billavenue.com/billpay/extBillCntrl/billFetchRequest/json",
      {
        agentId: "CC01CC01513515340681",
        billerAdhoc: false,
        agentDeviceInfo: {
          ip: "192.168.2.183",
          initChannel: "INT",
          mac: "01-23-45-67-89-ab",
        },
        customerInfo: {
          customerMobile: 9892506507,
          customerEmail: "kishor.anand@avenues.info",
          customerAdhaar: 548550008000,
          customerPan: "",
        },
        billerId: "HPCL00000NAT01",
        inputParams: {
          input: [
            { paramName: "Consumer Number", paramValue: 90883000 },
            { paramName: "Distributor ID", paramValue: 13645300 },
          ],
        },
      }
    );
  } catch (error) {
    console.error("Error in bill fetch:", error.message);
    res.status(500).json({ error: error.message });
  }
};

const billPayment = async (req, res) => {
  try {
    const data = axios.post(
      "https://stgapi.billavenue.com/billpay/extBillPayCntrl/billPayRequest/json",
      {
        billerAdhoc: "false",
        agentId: "CC01CC01513515340681",
        agentDeviceInfo: {
          initChannel: "AGT",
          ip: "192.168.2.183",
          mac: "01-23-45-67-89-ab",
        },
        customerInfo: {
          customerMobile: "9892506507",
          customerEmail: "kishor.anand@avenues.info",
          customerAdhaar: "548550008000",
          customerPan: "",
        },
        billerId: "HPCL00000NAT01",
        inputParams: {
          input: [
            { paramName: "Consumer Number", paramValue: "90883000" },
            { paramName: "Distributor ID", paramValue: "13645300" },
          ],
        },
        billerResponse: [
          {
            billAmount: "92300",
            billNumber: "1123314338567",
            customerName: "Ramesh Agrawal",
            dueDate: "",
          },
        ],
        additionalInfo: {
          info: [
            { infoName: "Distributor Contact", infoValue: "243306" },
            { infoName: "Distributor Name", infoValue: "Billavenue COMPANY" },
            { infoName: "Consumer Number", infoValue: "90883000" },
            { infoName: "Consumer Address", infoValue: "NA" },
          ],
        },
        amountInfo: { amount: "92300", currency: "356", custConvFee: "0" },
        paymentMethod: {
          paymentMode: "Credit Card",
          quickPay: "N",
          splitPay: "N",
        },
        paymentInfo: {
          info: [
            { infoName: "CardNum", infoValue: "4111111111111111" },
            { infoName: "AuthCode", infoValue: "123456" },
          ],
        },
      }
    );
  } catch (error) {
    console.error("Error in bill fetch:", error.message);
    res.status(500).json({ error: error.message });
  }
};













// const crypto = require('crypto');

// // Define the encryption and decryption functions
// const encrypt = (text, key) => {
//     // Ensure the key is 16 bytes (128 bits) long for AES-128
//     const keyBuffer = Buffer.from(key, 'utf8').slice(0, 16);

//     // Generate a random initialization vector (IV)
//     const iv = crypto.randomBytes(16);

//     // Create a cipher instance
//     const cipher = crypto.createCipheriv('aes-128-cbc', keyBuffer, iv);

//     // Encrypt the data
//     let encrypted = cipher.update(text, 'utf8', 'hex');
//     encrypted += cipher.final('hex');

//     // Return the IV and encrypted data as a base64-encoded string
//     return `${iv.toString('hex')}:${encrypted}`;
// }

// const decrypt = (encryptedText, key) => {
//     // Ensure the key is 16 bytes (128 bits) long for AES-128
//     const keyBuffer = Buffer.from(key, 'utf8').slice(0, 16);

//     // Split the IV and encrypted data
//     const [ivHex, encryptedData] = encryptedText.split(':');
//     const iv = Buffer.from(ivHex, 'hex');

//     // Create a decipher instance
//     const decipher = crypto.createDecipheriv('aes-128-cbc', keyBuffer, iv);

//     // Decrypt the data
//     let decrypted = decipher.update(encryptedData, 'hex', 'utf8');
//     decrypted += decipher.final('utf8');

//     return decrypted;
// }

// module.exports = {encrypt, decrypt}


{ "agentId": "CC01CC01513515340681", "agentDeviceInfo": { "ip": "192.168.2.73", "initChannel": "AGT", "mac": "01-23-45-67-89-ab"
},"customerInfo": { "customerMobile": 9898990084, "customerEmail": "", "customerAdhaar": "", "customerPan": ""
},"billerId": "OTME00005XXZ43", "inputParams": { "input": [
{ "paramName": "a", "paramValue": 10
},{ "paramName": "a b", "paramValue": 20
},{ "paramName": "a b c", "paramValue": 30
},{ "paramName": "a b c d", "paramValue": 40
},{ "paramName": "a b c d e", "paramValue": 50
}
]
}
}
